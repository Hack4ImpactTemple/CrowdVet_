{"ast":null,"code":"import _classCallCheck from \"/Users/brendanmanning/Documents/Professional/Hack4Impact/CrowdVet_/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/brendanmanning/Documents/Professional/Hack4Impact/CrowdVet_/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/brendanmanning/Documents/Professional/Hack4Impact/CrowdVet_/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/brendanmanning/Documents/Professional/Hack4Impact/CrowdVet_/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/brendanmanning/Documents/Professional/Hack4Impact/CrowdVet_/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/brendanmanning/Documents/Professional/Hack4Impact/CrowdVet_/src/pages/EvaluationResultsPage/CVButton.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './CVButton.css';\n\nvar CVButton =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CVButton, _Component);\n\n  function CVButton(props) {\n    var _this;\n\n    _classCallCheck(this, CVButton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CVButton).call(this, props));\n    _this.state = {};\n    _this.props = props;\n    return _this;\n  }\n\n  _createClass(CVButton, [{\n    key: \"render\",\n    value: function render() {\n      var className = \"btn \" + (this.props.secondary == true ? \"btn-secondary\" : \"btn-primary\");\n      return React.createElement(\"button\", {\n        className: className,\n        onClick: this.props.onClick,\n        style: {\n          backgroundColor: this.props.backgroundColor,\n          borderRadius: this.props.borderRadius,\n          fontSize: this.props.fontSize\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: {\n          paddingLeft: this.props.horizontalPadding,\n          paddingRight: this.props.horizontalPadding\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, this.props.title));\n    }\n  }]);\n\n  return CVButton;\n}(Component);\n\nCVButton.propTypes = {\n  /**\n   * Title: Text to be displayed on button\n   */\n  title: PropTypes.string,\n\n  /**\n   * Secondary: If true (or merely defined like <button secondary>), uses the secondary button style (white background, green border, green text) \n   */\n  secondary: PropTypes.bool,\n\n  /**\n   * On Click: Function called when the button is pressed\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Background Color: Allows the background color to be overridden. Otherwise, we use the color defined in CVButton.css\n   */\n  backgroundColor: PropTypes.string,\n\n  /**\n   * Border Radius: Allows the border radius to be overridden (X pixels). Otherwise, we use the radius defined in CVButton.css\n   */\n  borderRadius: PropTypes.number,\n\n  /**\n   * Font Size: Allows the font size to be overridden (X pixels). Otherwise, we use the size defined in CVButton.css\n   */\n  fontSize: PropTypes.number,\n\n  /**\n   * Horizontal Padding: Allows the horizontal padding of the text to be overridden. Otherwise, there is no explicit padding define (except a min-width of 320px)\n   */\n  horizontalPadding: PropTypes.number\n};\nCVButton.defaultProps = {\n  title: \"Button\",\n  secondary: false,\n  onClick: function onClick() {},\n  backgroundColor: undefined,\n  borderRadius: undefined,\n  fontSize: undefined\n};\nexport default CVButton;","map":{"version":3,"sources":["/Users/brendanmanning/Documents/Professional/Hack4Impact/CrowdVet_/src/pages/EvaluationResultsPage/CVButton.js"],"names":["React","Component","PropTypes","CVButton","props","state","className","secondary","onClick","backgroundColor","borderRadius","fontSize","paddingLeft","horizontalPadding","paddingRight","title","propTypes","string","bool","func","number","defaultProps","undefined"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,gBAAP;;IAEMC,Q;;;;;AAEF,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,kFAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa,EAAb;AACA,UAAKD,KAAL,GAAaA,KAAb;AAJe;AAKlB;;;;6BAEQ;AAEL,UAAIE,SAAS,GAAG,UAAW,KAAKF,KAAL,CAAWG,SAAX,IAAwB,IAAzB,GAAiC,eAAjC,GAAmD,aAA7D,CAAhB;AAEA,aACI;AAAQ,QAAA,SAAS,EAAED,SAAnB;AAA8B,QAAA,OAAO,EAAE,KAAKF,KAAL,CAAWI,OAAlD;AAA2D,QAAA,KAAK,EAAE;AAC9DC,UAAAA,eAAe,EAAE,KAAKL,KAAL,CAAWK,eADkC;AAE9DC,UAAAA,YAAY,EAAE,KAAKN,KAAL,CAAWM,YAFqC;AAG9DC,UAAAA,QAAQ,EAAE,KAAKP,KAAL,CAAWO;AAHyC,SAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKI;AAAM,QAAA,KAAK,EAAE;AACTC,UAAAA,WAAW,EAAE,KAAKR,KAAL,CAAWS,iBADf;AAETC,UAAAA,YAAY,EAAE,KAAKV,KAAL,CAAWS;AAFhB,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIK,KAAKT,KAAL,CAAWW,KAJhB,CALJ,CADJ;AAcL;;;;EA3BoBd,S;;AA8BvBE,QAAQ,CAACa,SAAT,GAAqB;AACjB;;;AAGAD,EAAAA,KAAK,EAAEb,SAAS,CAACe,MAJA;;AAKjB;;;AAGAV,EAAAA,SAAS,EAAEL,SAAS,CAACgB,IARJ;;AASjB;;;AAGAV,EAAAA,OAAO,EAAEN,SAAS,CAACiB,IAZF;;AAajB;;;AAGAV,EAAAA,eAAe,EAAEP,SAAS,CAACe,MAhBV;;AAiBjB;;;AAGAP,EAAAA,YAAY,EAAER,SAAS,CAACkB,MApBP;;AAqBjB;;;AAGAT,EAAAA,QAAQ,EAAET,SAAS,CAACkB,MAxBH;;AAyBjB;;;AAGAP,EAAAA,iBAAiB,EAAEX,SAAS,CAACkB;AA5BZ,CAArB;AA+BAjB,QAAQ,CAACkB,YAAT,GAAwB;AACpBN,EAAAA,KAAK,EAAE,QADa;AAEpBR,EAAAA,SAAS,EAAE,KAFS;AAGpBC,EAAAA,OAAO,EAAE,mBAAU,CAAE,CAHD;AAIpBC,EAAAA,eAAe,EAAEa,SAJG;AAKpBZ,EAAAA,YAAY,EAAEY,SALM;AAMpBX,EAAAA,QAAQ,EAAEW;AANU,CAAxB;AASA,eAAenB,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './CVButton.css';\n\nclass CVButton extends Component {\n  \n    constructor(props) {\n        super(props);\n\n        this.state = {};\n        this.props = props;\n    }\n  \n    render() {\n\n        var className = \"btn \" + ((this.props.secondary == true) ? \"btn-secondary\" : \"btn-primary\");\n\n        return (\n            <button className={className} onClick={this.props.onClick} style={{\n                backgroundColor: this.props.backgroundColor,\n                borderRadius: this.props.borderRadius,\n                fontSize: this.props.fontSize,\n            }}>\n                <span style={{\n                    paddingLeft: this.props.horizontalPadding,\n                    paddingRight: this.props.horizontalPadding\n                }}>\n                    {this.props.title}\n                </span>\n            </button>\n        );\n  }\n}\n\nCVButton.propTypes = {\n    /**\n     * Title: Text to be displayed on button\n     */\n    title: PropTypes.string,\n    /**\n     * Secondary: If true (or merely defined like <button secondary>), uses the secondary button style (white background, green border, green text) \n     */\n    secondary: PropTypes.bool,\n    /**\n     * On Click: Function called when the button is pressed\n     */\n    onClick: PropTypes.func,\n    /**\n     * Background Color: Allows the background color to be overridden. Otherwise, we use the color defined in CVButton.css\n     */\n    backgroundColor: PropTypes.string,\n    /**\n     * Border Radius: Allows the border radius to be overridden (X pixels). Otherwise, we use the radius defined in CVButton.css\n     */\n    borderRadius: PropTypes.number,\n    /**\n     * Font Size: Allows the font size to be overridden (X pixels). Otherwise, we use the size defined in CVButton.css\n     */\n    fontSize: PropTypes.number,\n    /**\n     * Horizontal Padding: Allows the horizontal padding of the text to be overridden. Otherwise, there is no explicit padding define (except a min-width of 320px)\n     */\n    horizontalPadding: PropTypes.number\n}\n\nCVButton.defaultProps = {\n    title: \"Button\",\n    secondary: false,\n    onClick: function(){},\n    backgroundColor: undefined,\n    borderRadius: undefined,\n    fontSize: undefined\n}\n\nexport default CVButton;\n"]},"metadata":{},"sourceType":"module"}