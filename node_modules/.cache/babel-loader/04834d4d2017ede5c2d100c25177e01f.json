{"ast":null,"code":"import _classCallCheck from \"/Users/brendanmanning/Documents/Professional/Hack4Impact/CrowdVet_/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/brendanmanning/Documents/Professional/Hack4Impact/CrowdVet_/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/brendanmanning/Documents/Professional/Hack4Impact/CrowdVet_/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/brendanmanning/Documents/Professional/Hack4Impact/CrowdVet_/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/brendanmanning/Documents/Professional/Hack4Impact/CrowdVet_/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/brendanmanning/Documents/Professional/Hack4Impact/CrowdVet_/src/CVNumberLine.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './CVNumberLine.css';\n\nvar CVNumberLine =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CVNumberLine, _Component);\n\n  function CVNumberLine(props) {\n    var _this;\n\n    _classCallCheck(this, CVNumberLine);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CVNumberLine).call(this, props));\n    _this.state = {};\n    _this.props = props;\n    return _this;\n  }\n\n  _createClass(CVNumberLine, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"canvas\", {\n        id: this.props.id,\n        class: \"cv-number-line\",\n        height: this.props.height,\n        width: this.props.width,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      });\n\n      if (this.props.big == undefined) {\n        return React.createElement(\"div\", {\n          style: {\n            minHeight: 20,\n            width: 100,\n            backgroundColor: \"blue\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(\"div\", {\n          style: {\n            minHeight: 100,\n            width: 100,\n            backgroundColor: \"orange\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var canvas = document.getElementById(this.props.id);\n      var ctx = canvas.getContext(\"2d\");\n      ctx.strokeStyle = this.props.color;\n      ctx.fillStyle = this.props.color;\n      ctx.globalAlpha = 1.0;\n      var height = canvas.height;\n      var width = canvas.width;\n      var padding = 4;\n      var lineY = 34;\n      var lineX1 = 124;\n      var lineX2 = width;\n      var tickHeight = 9;\n      var circleHeight = 32;\n      var rectW = 60;\n      var votesLabelHeight = 22;\n      var linewidth = lineX2 - lineX1;\n      var unitwidth = linewidth / (2 * this.props.scale); // Please note: the ends are 1 unit, but all other ones are 2 units apart\n\n      var circleX = lineX1 + (2 * this.props.value - 1) * unitwidth;\n      var circleY = lineY - circleHeight / 2;\n      var circleR = circleHeight / 2;\n      var maxvotes = Math.max.apply(null, this.props.votes);\n      var maxvotesheight = height - lineY - votesLabelHeight - padding;\n\n      for (var i = 1; i < 2 * this.props.scale; i += 2) {\n        var tickX = lineX1 + i * unitwidth;\n        var tickY1 = lineY - 1;\n        var tickY2 = tickY1 - tickHeight; // Draw the ticks\n\n        ctx.beginPath();\n        ctx.setLineDash([]);\n        ctx.moveTo(tickX, tickY1);\n        ctx.lineTo(tickX, tickY2);\n        ctx.stroke(); // Draw the average value (if )\n\n        if (this.props.votes) {\n          var val = this.props.votes[(i - 1) / 2];\n          var rectH = val * maxvotesheight / maxvotes;\n          var rectX = tickX - rectW / 2;\n          var rectY = tickY1 + padding; // Don't draw zero-size boxes\n\n          if (val == 0) {\n            continue;\n          } // Draw the dashed reactagle\n\n\n          ctx.beginPath();\n          ctx.setLineDash([2, 2]);\n          ctx.rect(rectX, rectY, rectW, rectH);\n          ctx.stroke(); // Label the number of votes\n\n          ctx.font = \"18px Roboto\";\n          ctx.textAlign = \"center\";\n          ctx.fillText(val + \" votes\", rectX + rectW / 2, rectY + rectH + 20, rectW);\n        }\n      } // Draw the line\n\n\n      ctx.beginPath();\n      ctx.setLineDash([]);\n      ctx.moveTo(lineX1, lineY);\n      ctx.lineTo(lineX2, lineY);\n      ctx.stroke(); // Draw the value (circle)\n\n      ctx.beginPath();\n      ctx.arc(circleX, circleY, circleR, 0, 2 * Math.PI);\n      ctx.stroke(); // Draw the value (in the circle)\n\n      ctx.font = \"14px Roboto\";\n      ctx.textAlign = \"center\";\n      ctx.fillText(this.props.value, circleX, circleY + circleY / 4 - 1); // Draw the label (e.g. \"Kiva Vote\")\n\n      ctx.font = \"18px Roboto\";\n      ctx.textAlign = \"left\";\n      ctx.fillText(this.props.title, 0, lineY);\n    }\n  }]);\n\n  return CVNumberLine;\n}(Component);\n\nCVNumberLine.propTypes = {// ... prop types here\n};\nCVNumberLine.defaultProps = {// ... default props here\n};\nexport default CVNumberLine;","map":{"version":3,"sources":["/Users/brendanmanning/Documents/Professional/Hack4Impact/CrowdVet_/src/CVNumberLine.js"],"names":["React","Component","PropTypes","CVNumberLine","props","state","id","height","width","big","undefined","minHeight","backgroundColor","canvas","document","getElementById","ctx","getContext","strokeStyle","color","fillStyle","globalAlpha","padding","lineY","lineX1","lineX2","tickHeight","circleHeight","rectW","votesLabelHeight","linewidth","unitwidth","scale","circleX","value","circleY","circleR","maxvotes","Math","max","apply","votes","maxvotesheight","i","tickX","tickY1","tickY2","beginPath","setLineDash","moveTo","lineTo","stroke","val","rectH","rectX","rectY","rect","font","textAlign","fillText","arc","PI","title","propTypes","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './CVNumberLine.css';\n\nclass CVNumberLine extends Component {\n  \n    constructor(props) {\n        super(props);\n\n        this.state = {};\n        this.props = props;\n    }\n  \n    render() { \n\n        return <canvas id={this.props.id} class=\"cv-number-line\" height={this.props.height} width={this.props.width}/>\n\n        if(this.props.big == undefined) {\n            return <div style={{minHeight: 20, width: 100, backgroundColor: \"blue\"}}></div>\n        } else {\n            return <div style={{minHeight: 100, width: 100, backgroundColor: \"orange\"}}></div>\n        }\n    }\n\n    componentDidMount() {\n        \n        var canvas = document.getElementById(this.props.id);\n        \n        var ctx = canvas.getContext(\"2d\");\n        ctx.strokeStyle = this.props.color;\n        ctx.fillStyle = this.props.color;\n        ctx.globalAlpha = 1.0;\n\n        var height = canvas.height;\n        var width = canvas.width;\n\n        var padding = 4;\n\n        var lineY = 34;\n        var lineX1 = 124;\n        var lineX2 = width;\n\n        var tickHeight = 9;\n        var circleHeight = 32;\n        var rectW = 60;\n        var votesLabelHeight = 22;\n\n        var linewidth = lineX2 - lineX1\n        var unitwidth = linewidth / (2 * this.props.scale); // Please note: the ends are 1 unit, but all other ones are 2 units apart\n\n        var circleX = lineX1 + ( ( (2 * this.props.value) - 1) * unitwidth);\n        var circleY = lineY - (circleHeight / 2);\n        var circleR = circleHeight / 2;\n\n        var maxvotes = Math.max.apply(null,this.props.votes);\n        var maxvotesheight = height - lineY - votesLabelHeight - padding;\n\n        for(var i = 1; i < 2 * this.props.scale; i += 2) {\n            \n            var tickX = lineX1 + (i * unitwidth);\n            var tickY1 = lineY - 1;\n            var tickY2 = tickY1 - tickHeight;\n            \n            // Draw the ticks\n            ctx.beginPath();\n            ctx.setLineDash([])\n            ctx.moveTo(tickX, tickY1);\n            ctx.lineTo(tickX, tickY2);\n            ctx.stroke();\n\n            // Draw the average value (if )\n            if(this.props.votes) {\n\n                var val = this.props.votes[(i-1)/2];\n                var rectH = (val * maxvotesheight) / maxvotes; \n\n                var rectX = tickX - (rectW / 2);\n                var rectY = tickY1 + padding;\n\n                // Don't draw zero-size boxes\n                if(val == 0) {\n                    continue;\n                }\n\n                // Draw the dashed reactagle\n                ctx.beginPath();\n                ctx.setLineDash([2, 2]);\n                ctx.rect(rectX, rectY, rectW, rectH); \n                ctx.stroke();\n\n                // Label the number of votes\n                ctx.font = \"18px Roboto\";\n                ctx.textAlign = \"center\";\n                ctx.fillText(val + \" votes\",rectX + (rectW / 2),rectY + rectH + 20, rectW);\n            }\n        }\n\n\n        // Draw the line\n        ctx.beginPath();\n        ctx.setLineDash([])\n        ctx.moveTo(lineX1, lineY);\n        ctx.lineTo(lineX2, lineY);\n        ctx.stroke();\n\n        // Draw the value (circle)\n        ctx.beginPath();\n        ctx.arc(circleX, circleY, circleR, 0, 2 * Math.PI);\n        ctx.stroke();\n\n        // Draw the value (in the circle)\n        ctx.font = \"14px Roboto\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(this.props.value,circleX,circleY + (circleY / 4) - 1);\n\n        // Draw the label (e.g. \"Kiva Vote\")\n        ctx.font = \"18px Roboto\";\n        ctx.textAlign = \"left\";\n        ctx.fillText(this.props.title, 0, lineY);\n\n    }\n}\n\nCVNumberLine.propTypes = {\n   // ... prop types here\n}\n\nCVNumberLine.defaultProps = {\n    // ... default props here\n}\n\nexport default CVNumberLine;\n"]},"metadata":{},"sourceType":"module"}