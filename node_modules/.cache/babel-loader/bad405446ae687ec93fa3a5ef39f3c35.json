{"ast":null,"code":"import _classCallCheck from \"/Users/brendanmanning/Documents/Professional/Hack4Impact/CrowdVet_/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/brendanmanning/Documents/Professional/Hack4Impact/CrowdVet_/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/brendanmanning/Documents/Professional/Hack4Impact/CrowdVet_/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/brendanmanning/Documents/Professional/Hack4Impact/CrowdVet_/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/brendanmanning/Documents/Professional/Hack4Impact/CrowdVet_/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/brendanmanning/Documents/Professional/Hack4Impact/CrowdVet_/src/pages/EvaluationPage/CVTable.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './CVTable.css';\n/**\n * Presents a custom table using the provided props:\n *   1. string? title: an optional table title\n *   2. string[] cols: an array of column names\n *   3. data[][] data: a 2d array of data for each row (treat the first index of each row as the row's title)\n *   3. string? footer: an optional table footer\n */\n\nvar CVTable =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CVTable, _Component);\n\n  /**\n   * Dynamically constructs a table using the provided props\n   * @param {object} props \n   */\n  function CVTable(props) {\n    var _this;\n\n    _classCallCheck(this, CVTable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CVTable).call(this, props));\n    _this.state = {};\n    _this.props = props;\n    return _this;\n  }\n\n  _createClass(CVTable, [{\n    key: \"render\",\n    value: function render() {\n      if (!this.props.cols || !this.props.data) {\n        return null;\n      }\n\n      return React.createElement(\"table\", {\n        class: \"cv-table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, this.renderTable(this.props.title, this.props.cols, this.props.data, this.props.footer));\n    }\n  }, {\n    key: \"renderTable\",\n    value: function renderTable(title, colNames, rowData, footer) {\n      var titleRow = null;\n      var headerRow = null;\n      var dataRows = [];\n      var footerRow = null; // Render the table's header\n\n      if (title) {\n        titleRow = React.createElement(\"th\", {\n          id: \"cv-title-row\",\n          colspan: colNames.length + 1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, title);\n      } // Render the labels for every column\n\n\n      headerRow = React.createElement(\"tr\", {\n        id: \"cv-header-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \" \", function () {\n        var jsx = [];\n\n        for (var i = 0; i <= colNames.length; i++) {\n          if (i === 0) {\n            jsx.push(React.createElement(\"th\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 53\n              },\n              __self: this\n            }));\n          } else {\n            jsx.push(React.createElement(\"th\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 55\n              },\n              __self: this\n            }, colNames[i - 1]));\n          }\n        }\n\n        return jsx;\n      }(), \" \"); // Render the data rows (The first item of every row is treated as that row's label)\n\n      dataRows = function () {\n        var jsx = [];\n\n        for (var r = 0; r < rowData.length; r++) {\n          var row = [];\n\n          for (var c = 0; c < rowData[r].length; c++) {\n            if (c === 0) {\n              row.push(React.createElement(\"td\", {\n                class: \"cv-row-title\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 69\n                },\n                __self: this\n              }, rowData[r][c]));\n            } else {\n              row.push(React.createElement(\"td\", {\n                class: \"cv-row-data\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 71\n                },\n                __self: this\n              }, rowData[r][c]));\n            }\n          }\n\n          jsx.push(React.createElement(\"tr\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 74\n            },\n            __self: this\n          }, row));\n        }\n\n        return jsx;\n      }(); // Render the table\n\n\n      if (footer) {\n        footerRow = React.createElement(\"th\", {\n          id: \"cv-footer-row\",\n          colspan: colNames.length + 1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, footer);\n      } // Take the titleRow, headerRow, and footerRow and add them to an array\n      // Because dataRows is actually an array itself, \n      // add every element from dataRows to the jsx array\n\n\n      var jsx = [];\n      jsx.push(titleRow);\n      jsx.push(headerRow);\n\n      for (var d = 0; d < dataRows.length; d++) {\n        jsx.push(dataRows[d]);\n      }\n\n      jsx.push(footerRow);\n      return jsx;\n    }\n  }]);\n\n  return CVTable;\n}(Component);\n\nCVTable.propTypes = {\n  /**\n   * Title?: Optionally show a table title\n   */\n  title: PropTypes.string,\n\n  /**\n   * Cols: The names of the columns (as an array)\n   */\n  cols: PropTypes.array,\n\n  /**\n   * Rows: The data we'll draw into each row (as a 2d array). \n   * We treat the first element of each row as that row's title\n   * For example, [['apple', 'red', '2.3oz'],['lemon','yellow','1.2oz']]\n   */\n  rows: PropTypes.array,\n\n  /**\n   * Footer?: Optionally show some footer text\n   */\n  footer: PropTypes.string\n};\nCVTable.defaultProps = {\n  title: undefined,\n  cols: [],\n  rows: [],\n  footer: undefined\n};\nexport default CVTable;","map":{"version":3,"sources":["/Users/brendanmanning/Documents/Professional/Hack4Impact/CrowdVet_/src/pages/EvaluationPage/CVTable.js"],"names":["React","Component","PropTypes","CVTable","props","state","cols","data","renderTable","title","footer","colNames","rowData","titleRow","headerRow","dataRows","footerRow","length","jsx","i","push","r","row","c","d","propTypes","string","array","rows","defaultProps","undefined"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './CVTable.css';\n\n/**\n * Presents a custom table using the provided props:\n *   1. string? title: an optional table title\n *   2. string[] cols: an array of column names\n *   3. data[][] data: a 2d array of data for each row (treat the first index of each row as the row's title)\n *   3. string? footer: an optional table footer\n */\nclass CVTable extends Component {\n  \n    /**\n     * Dynamically constructs a table using the provided props\n     * @param {object} props \n     */\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n        this.props = props;\n    }\n  \n    render() { \n\n        if(!this.props.cols || !this.props.data) {\n            return null;\n        }\n\n        return <table class=\"cv-table\">{\n            this.renderTable(this.props.title, this.props.cols, this.props.data, this.props.footer)\n        }</table>       \n    }\n\n    renderTable(title, colNames, rowData, footer) {\n        \n        var titleRow = null;\n        var headerRow = null;\n        var dataRows = [];\n        var footerRow = null;\n\n        // Render the table's header\n        if(title) {\n            titleRow = <th id=\"cv-title-row\" colspan={colNames.length + 1}>{title}</th>\n        }\n        \n        // Render the labels for every column\n        headerRow = <tr id=\"cv-header-row\"> { function() {\n            var jsx = [];\n            for(var i = 0; i <= colNames.length; i++) {\n                if(i === 0) {\n                    jsx.push(<th></th>)\n                } else {\n                    jsx.push(<th>{colNames[i-1]}</th>)\n                }\n            }\n            return jsx;\n        }()} </tr>\n        \n\n        // Render the data rows (The first item of every row is treated as that row's label)\n        dataRows = function() {\n            var jsx = [];\n            for(var r = 0; r < rowData.length; r++) {\n                var row = [];\n                for(var c = 0; c < rowData[r].length; c++) {\n                    if(c === 0) {\n                        row.push(<td class=\"cv-row-title\">{rowData[r][c]}</td>)\n                    } else {\n                        row.push(<td class=\"cv-row-data\">{rowData[r][c]}</td>)\n                    }\n                }\n                jsx.push(<tr>{row}</tr>);\n            }\n            return jsx;\n        }()\n\n        // Render the table\n        if(footer) {\n            footerRow = <th id=\"cv-footer-row\" colspan={colNames.length + 1}>{footer}</th>\n        }\n\n        // Take the titleRow, headerRow, and footerRow and add them to an array\n        // Because dataRows is actually an array itself, \n        // add every element from dataRows to the jsx array\n        var jsx = [];\n        jsx.push(titleRow);\n        jsx.push(headerRow);\n        for(var d = 0; d < dataRows.length; d++) {\n            jsx.push(dataRows[d]);\n        }\n        jsx.push(footerRow);\n\n        return jsx;\n    }\n}\n\nCVTable.propTypes = {\n   /**\n    * Title?: Optionally show a table title\n    */\n   title: PropTypes.string,\n   /**\n    * Cols: The names of the columns (as an array)\n    */\n   cols: PropTypes.array,\n   /**\n    * Rows: The data we'll draw into each row (as a 2d array). \n    * We treat the first element of each row as that row's title\n    * For example, [['apple', 'red', '2.3oz'],['lemon','yellow','1.2oz']]\n    */\n   rows: PropTypes.array,\n   /**\n    * Footer?: Optionally show some footer text\n    */\n   footer: PropTypes.string\n}\n\nCVTable.defaultProps = {\n    title: undefined,\n    cols: [],\n    rows: [],\n    footer: undefined\n}\n\nexport default CVTable;\n"]},"metadata":{},"sourceType":"module"}